* BossDB Refresh

The original purpose of [[https://bossdb.org/][BossDB]] has been to house the dataset for [[https://www.iarpa.gov/index.php/research-programs/microns][the
MICrONS project]], which is around 2.5 petabyte of data. The codebase 
was started in the early days of serverless, and since then a lot has
changed. But for its main purpose: why fix what isn't broke. Nonetheless,
if it is to be deployed more widely then why not make it much easier to
deploy? Ergo, let's noodle what a refresh would look like architecturally.

** Philosophy: stay all in with AWS

The MICrONS data will probably never leave AWS. So, the code the works
with it will probably never leave AWS. Ergo, by going all-in with AWS
technology management of the system could be simplified.

How labs can cache the MICrONS data and annotate.


** Arch of BossDB

As is the architecture of BossDB can be considered a hybrid
architecture which served its purpose well. "Hybrid" here means
consisting of "old-school" pre-serverless machinery, with a turbo
booster of serverless tech bolted on. The goal of this refresh is
to un complicate the hybrid architecture by adopting **more** AWS
product in the BossDB codebase.

The following are the high level changes proposed

| Existing              | Proposed                   |
|-----------------------+----------------------------|
| Hybrid architecture   | Pure AWS architecture      |
| Self-managed services | Fully managed service      |
| Lotta set-up          | Deploy via CloudFormations |
|                       |                            |

The JHUAPL team has a lot of experience grown out of the Hubble
project.  As such they brought that knowledge with them while working
on BossDB.  For example, various proven open source tools for storing
secrets, managing single sign-on, RESTful API request handling,
etc. None of that is particularly interesting, and why not just reuse
what they already knew. Also note that

The core engine of BossDB is built upon AWS severless technology:
Lambda, SQS, DynamoDB, Step Functions, etc. The rest of it is consists
of proven non-serverless technologies.

The main goal of this project is to de-hybridize the architecture by
going all-in on AWS technologies which have been introduced by Amazon
in the interim since the BossDB codebase was initiated. It is arguably
a bit perverse for open source to be tuned up just for a single commercial
cloud platform, but the hypothesis herein is that by doing so it will
make it much easier for other organizations to deploy BossDB, thereby
speeding up the diffusion of innovation. Ideally the other cloud providers
would have equivalent tech to those parts of AWS used in the BossDB refresh,
but sadly that is not the case in mid-2020.

** Specific changes

| Existing | Proposed |
|----------+----------|
|          |          |

