* Reconstrue Cuboids

#+attr_html: :width 400px
[[by_topic/cuboids/images/cuboids_brandmark.png]]

** Introduction

Reconstrue Cuboids is essentially just a label for a collection of
proven software which deals with neuroscientific [[https://en.wikipedia.org/wiki/Volume_rendering][volumetric imaging data]]. 
All software adopted into Reconstrue Cuboids is licensed in a
commercially friendly manner. For example, any GPL licensed code is
[[https://youtu.be/SNTzOBKs1bA?t=96][right out]].

** Data Structure

As the name implies, the core data abstraction is cuboids. Cuboid data
can be anisotropic, as required by various experimental modalities.

A cuboid, [[https://mathworld.wolfram.com/Cuboid.html][as defined by Wolfram]], is a "closed box composed of three
pairs of rectangular faces placed opposite each other and joined at
right angles to each other." Identically shaped cuboids are used to
(3D) tessellate a volume. For a given dataset, voxels are indivisible
cuboids.

Cuboids [[https://www.biorxiv.org/content/10.1101/217745v2.article-info][as defined by bossDB]] are "multi-channel 3-dimensional image
volumes" which means the core data structure has a 4-dimensional
address space: three of the dimensions are a voxel's address in space
(X, Y, and Z) and the final dimension is 1-D array of channel values
i.e. various attributes of a given voxel.

A cuboid [[https://github.com/google/neuroglancer/blob/master/src/neuroglancer/datasource/precomputed/volume.md][as defined by Neuroglancer's precomputed format]] is similarly
shaped: "Each subvolume is conceptually a 4-dimensional [x, y, z,
channel] array."

So, a 4-dimensional array is a data structure which can represent
neuroimaging datasets in implementations both dynamic (bossDB RESTful)
and static (neuroglancers precomputed cuboids format). Therefore,
Reconstrue Cuboids is software which deals with 4-dimensional cuboids.

** Scope

Reconstrue Cuboids is not limited to any specific implementation. The
subject is software which can handle the massive scale and velocity of
data as required by trends in neuroscience. For example, the MICrONS
project involved a single experimental dataset on one cubic millimeter
of brain, which resulted in ~2.5 petabyte of data.

The focus is on the data structure, which is cuboids. There are
multiple potential implementations ranging from static file
representations (e.g. cloud-volume's precomputed fixed cuboids stored
in static files) to RESTful services (e.g. bossDB which can serve up
cuboids of arbitrary coordinates and scale).

Some of the software can actually handle petabytes of data on
commercial cloud services (e.g. [[https://bossdb.org/][BossDB on AWS]]) and some only run on a
single machine (e.g. [[https://github.com/aplbrain/bossphorus][Bossphorus]]).

By focusing on data structures, wire protocols, and APIs code can be
developed which can deal with various hardware deployments. This does
not preclude solutions which involve only a single machines, such as
[[https://github.com/aplbrain/bossphorus][Bossphorus]].

The following are codebases that have been adopted into Reconstrue
Cuboids:

| Codebase      | License      |
|---------------+--------------|
| [[https://github.com/jhuapl-boss/boss][bossDB]]        | [[https://github.com/jhuapl-boss/boss/blob/master/LICENSE.md][Apache 2.0]]   |
| [[https://github.com/aplbrain/bossphorus][bossphorus]]    | [[https://github.com/aplbrain/bossphorus/blob/master/LICENSE][Apache 2.0]]   |
| [[https://github.com/seung-lab/chunkflow][chunkflow]]     | [[https://github.com/seung-lab/chunkflow/blob/master/LICENSE][Apache 2.0]]   |
| [[https://github.com/seung-lab/cloud-volume][cloud-volume]]  | [[https://github.com/seung-lab/cloud-volume/blob/master/LICENSE][BSD 3-Clause]] |
| [[https://jupyter.org/hub][JupyterHub]]    | [[https://github.com/jupyterhub/jupyterhub/blob/master/COPYING.md][BSD 3-Clause]] |
| [[https://github.com/jhuapl-boss/ingest-client][ingest-client]] | [[https://github.com/jhuapl-boss/ingest-client/blob/master/LICENSE][Apache 2.0]]   |
| [[https://github.com/jhuapl-boss/intern][intern]]        | [[https://github.com/jhuapl-boss/intern/blob/master/license][Apache 2.0]]   |
| [[https://github.com/aplbrain/saber][SABER]]         | [[https://github.com/aplbrain/saber/blob/master/LICENSE][Apache 2.0]]   |

** Rational

Most of the software labeled "Reconstrue Cuboids" is actually third
party i.e. written by people who are not part of the organization,
Reconstrue. "Reconstrue Cuboids" is simply a label on source code
denoting that it has been exercised by Reconstrue, and found to be
suitable to task. These are tools that have been used together in
projects. As such, Reconstrue's early contribution is in working
out component integration, both technically and legally. For example,
one project involves a system which uses [[https://bossdb.org/][bossDB]] with [[https://github.com/seung-lab/chunkflow][chunkflow]] to
reconstruct neurons from brightfield microscope image stacks.

Beyond tactical progress on any given project, the strategic community
value of this Reconstrue Cuboids exercise is that corporate entities
(Reconstrue included) can build upon the code and not have to consult
with lawyers up-front (of course, talk to your lawyers; no warrenty
implied herein). The mail goal is to increase the rate of open source
innovation in this field. For more on the rational behind this, see
[[https://github.com/reconstrue/presentations/blob/master/bioimage_2019/bioimage_2019_poster.pdf][Reconstrue Stack]].

