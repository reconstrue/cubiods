<<<<<<< Updated upstream
* The Cuboids Manifesto

[[./aux/pitcher_man/aws_pitcher.png]]

** Introduction
=======
#+html_head: <link rel="stylesheet" type="text/css" href="aux/org.css"/>
#+title: Cuboids Manifesto
#+options: toc:nil
#+options: html-postamble:nil

#+attr_html: :width 80%
[[./aux/images/logos/cuboids_lettermark_bw.png]]

* Abstract

This document proposes modifications to the bossDB open source
codebase.  The changes would make bossDB easier to deploy and
maintain.  The suggested modifications drink deeply from the AWS
serverless Kool-Aid pitcher: less servers and more fully managed services.

#+attr_html: :width 25%
[[./aux/images/aws_pitcher.png]]

The [[https://bossdb.org/][bossDB]] is a [[https://en.wikipedia.org/wiki/Volume_rendering][volumetric]] database for storing and processing
petabytes of data from microscopic imaging of biological tissue.  Its
initial development was funded via grants from [[https://www.iarpa.gov/][IARPA]] as part of [[https://www.iarpa.gov/index.php/research-programs/microns][the
MICrONS project]]. As is normal with such funding, the resulting codebase is
open source and available under [[https://www.apache.org/licenses/LICENSE-2.0][the Apache 2.0 license]].

The marque benchmark of bossDB performance is an approximately 2.5
petabyte dataset, the output of a single experiment wherein a cubic
millimeter of neural tissue was scanned. Machine learning image
recognition software then processed the raw data to reconstruct
approximately 100,000 neurons, down to individual synapses.

The modified bossDB codebase proposed herein is designed to be the repository
component of a platform which has been given the working title of
Cuboids. Cuboids builds atop the existing work and doubles down on the AWS
lock-in by internalizing the above mentioned image processing, which
previously has been done separately requiring the transfer of
mountains of data to external systems.  Cubiods extends the bossDB
platform such that software-based analysis of the data residing in
a bossDB repository can performed close to the data.

#+attr_html: :width 400px
[[./aux/images/mohammed_and_the_mountain.jpg]]

#+TOC: headlines 2

| Author   | [[http://tigue.com][John Tigue]]   |
| Version  | 2020-10-22-1 |
| License  | CC0 1.0      |

* Introduction
>>>>>>> Stashed changes

The original bossDB codebase evidences a valid and shrewd
architectural style which values vendor neutral open source. Yet to
deal with the sporatic volume and velocity of data being throw off by
electron microscopes, an AWS serverless engine was adopted. This
worked well but resulted in a mixed architectural style which is more
complex than necessary. Cuboids aims to resolve the complexity by
going all-in on AWS lock-in.

Furthermore, the bossDB codebase was [[https://github.com/jhuapl-boss/boss/graphs/contributors][started in 2015]], which was early
days for AWS serverless, nevermind using such tech to scale to
petabytes of data. This neccessitated building out various
[[https://jeremybower.com/articles/undifferentiated-heavy-lifting-2-0.html]["undifferentiated heavy lifting"]] support machinery in order to get on
with the task of building a petascale spatial database.  In the
interim, AWS has gotten around to providing managed services such as
API Gateway, Cognito, and AWS Secrets Manager.  Simply keeping the
current architecture but rewriting those components which could be
replaced with equivalent AWS service would make bossDB much easier to
deploy and maintain. Additionally, AWS Lambda -- The core technology
of serverless -- has mature in the interim such that large Python
codebases can now be deployed on Lambda. By adopting [[https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html][Lambda layers]] 3D
image recognition can be performed within a bossDB-based system, which
was not possible in 2015. Doing so enables Cuboids to be more of a
"whole product" for microscopy workflows rather than simply a
repository accessed by external analysis tools.

This proposal argues to dive headlong down the slippery slope of AWS
lock-in.  This may seem counterintuitive and even distasteful given
the original vendor-neutral architecture. Although [[https://cloudwars.co/amazon/inside-amazon-aws-no-longer-jeff-bezos-growth-engine/][AWS' lead is
slipping]], it does not appear that a cross-platform serverless version
of bossDB is possible yet, given the state of AWS' competitors
(e.g. a lack of any AWS Step Functions equivalent from Google).

Therefore, it is argued herein that the mixed architecture is harming
the [[https://en.wikipedia.org/wiki/Diffusion_of_innovations][diffusion of innovation]], especially regarding that theory's
criteria "complexity" and "trialability." So, perhaps we should accept
that this codebase will never leave AWS and drink up to slim down.

<<<<<<< Updated upstream
** Terminology
=======



* Terminology
>>>>>>> Stashed changes

In order to distinguish references to the existing and proposed
codebases, the following terms will be used throughout this document:
- ~bossDB~: the existing codebase, as originally named
- ~neu_boss~: the proposed modified codebase

There seems to be a trend in JHU/APL's documentation to casually refer
to the codebase as "the Boss" but here the goal is to distinguish two
variants so the original name ~bossDB~ is used herein.

At the risk of ruining the humor, ~neu_boss~ is a word play on "new"
(as in Coke) and "neural." The term also follows the trend of dropping
the ~DB~ part of the name. Alternatively, "[[https://en.wikipedia.org/wiki/Bossa_nova][bossa nova]]" -- literally
“new trend” -- did make the short list but that option would have lost
the "neural" implication. It is *not* imagined that there will actually
be a repository called ~neu_boos~ as the label is just not that good;
it serves only as a tag for this proposal.

So, let's [[https://www.youtube.com/watch?v=SHhrZgojY1Q]["meet the new boss, same as the old boss."]]
 
<<<<<<< Updated upstream
** Philosophy: drink more AWS Kool-Aid

=======
* Manifesto philosophy: drink more AWS Kool-Aid

This title is lightheartedly entitled, The Cuboids Manifesto. This is
because there is techno-political philosophy behind the proposal --
one which accepts the reality of vendor lock-in given the current
state of cloud technology. Significant parts of the bossDB codebase
are from a pre-cloud vendor neutral culture. Vendor neutrality is a
good thing but Cuboids consciously jettisons that feature in the
interests of accellerating innovation via improved developer velocity
and reduced devops workload.  AWS lock-in is accepted because it re
  
>>>>>>> Stashed changes
There's two ways that changes could be made. I wish the first were
possible but not at this time.
1. Stay vendor neutral. Build a serverless engine which works on other vendor's clouds. (Say with serverless.com)
2. Go all in on the AWS. 

Evolution led to a hybrid architecture, a pre-serverless car platform with
a turbo serverless engine in the core. This works though. Just could
reduce difficulty of install and management. Want easier maintenance.

They started with solid old-school code, built ut a cubiods model,
then implemented for scalability via serverless.

The serverless engine cannot at this time be ported to other cloud providers.
So, might as well lose the cross-platform goodness and just go all in on AWS.
Any perfectly good open-sourced component that could be replace with an equivalent
AWS fully managed service would mean less management. The goal is to make
deploy and management lower hassle. 

(Rather surprising that the other cloud providers plus serverless.com cannot
be used to make a vendor neutral bossDB. No StepFunctions. etc?)

The original purpose of [[https://bossdb.org/][BossDB]] has been to house the dataset for [[https://www.iarpa.gov/index.php/research-programs/microns][the
MICrONS project]], which is around 2.5 petabyte of data. The codebase 
was started in the early days of serverless, and since then a lot has
changed. But for its main purpose: why fix what isn't broke. Nonetheless,
if it is to be deployed more widely then why not make it much easier to
deploy? Ergo, let's noodle what a refresh would look like architecturally.


[[https://www.youtube.com/watch?v=_fjEViOF4JE][Kool-Aid Pitcher Man wall breaks]]

BossDB was an old-school open source car with an AWS serverless turbo-boosed engine dropped in.
That engince can only run on planet AWS so, while in Rome do like the Romans.

The core of bossDB will  MICrONS data will probably never leave AWS. So, the code the works
with it will probably never leave AWS. Ergo, by going all-in with AWS
technology management of the system could be simplified.

How labs can cache the MICrONS data and annotate.

Quoting Francis Bacon:
#+BEGIN_QUOTE
Mahomet cald the Hill to come to him. And when the Hill stood still,
he was neuer a whit abashed, but said; If the Hill will not come to
Mahomet, Mahomet wil go to the hil
#+END_QUOTE

<<<<<<< Updated upstream
** Architectural before and after

This section will walk through the the logic of the following triptych. 
Notice how radiating out from the lower left quadrant things stay the
same in all three panels. The reason is that the green region is the
the serverless core adn w/ a Redis cache)
=======


* Proposed architectural modification overview

This section explains the the logic of the following triptych. 
>>>>>>> Stashed changes

[[./aux/triptych.png]]

The three panels break out as follows:
- On the left is the existing architecture
- In the middle, in red are 3 sub-system which will be changed
- On the right is the resulting equivalent but easier to manage architecture

Notice how radiating out from the lower left quadrant things stay the
same in all three panels. The reason is that the green region is the
the serverless core with a managed Redis cache.

First consider the left panel of the above image, wich is Figure 7 from [Kleissas et alia, 2017]

<<<<<<< Updated upstream
[[./aux/kleissas_et_alia_2017_figure_7_attributed.png]]
=======
#+attr_html: :width 75%
[[./aux/images/kleissas_et_alia_2017_figure_7_attributed.png]]
>>>>>>> Stashed changes

In this document this image will be used as the basis of a butcher's cut chart to illustrate the proposed architectural changes.

There are 3 big proposed modifications. Those 3 parts of the architecture to be modified are highlighted in red below:
- The RESTful interface's machinery
- The Single-Sign On (SSO) machinery
- The secrets keeping machinery

<<<<<<< Updated upstream
[[./aux/bossdb_changes.png]]
=======
#+attr_html: :width 75%
[[./aux/images/bossdb_changes.png]]
>>>>>>> Stashed changes

The 3 red zones represent 3 of the 4 main sub-projects:
- The upper left red zone is the REST interface 
  - can be replaced by API Gateway etc
- The upper right red zone can be replaced by Cognito
- The lower reg zone can be replace with AWS Secrets Manager

The resulting architecture would looks as follows:

<<<<<<< Updated upstream
[[./aux/neu_boss_arch.png]]
=======
#+attr_html: :width 75%
[[./aux/images/neu_boss_arch.png]]
>>>>>>> Stashed changes

Note: all four of these changes are simply to support infrastructure, not to the core engine of the spatial database
- Sticking with the serverless
- Manimize management by maximally leveraging AWS services equivalent services that can be de delegated to

Features of the parts to be update
- Not serverless
- Requiring server management
- Undifferentiated, off-the-sheff app infrastructure
- Quality, proven, platform-independent open source

Features of the parts being kept essentially as they are
- AWS serverless. The core engine of bossDB
- Bespoke code for dealing with cuboids
- Domain specific
- AWS only open source

Let's be very clear the code to be replaced is good code. 
- Proven platform independent, scalable open source.
- It's solid pre-serverless

To put is at simply as possible, would love to be able to spin up a serverless spatial DB with just a single CloudFormation

<<<<<<< Updated upstream
** The AWS serverless core

This essentially stays the same. The only changes would be at its
interface to the auth and audit system. Also related is how they are
generated. It is proposed to drop Heaviside and adopt AWS CDK in stead.


** Arch of BossDB
=======

* Architecture of BossDB
>>>>>>> Stashed changes

As is the architecture of BossDB can be considered a hybrid
architecture which served its purpose well. "Hybrid" here means
consisting of "old-school" pre-serverless machinery, with a turbo
booster of serverless tech bolted on. The goal of this refresh is
to un complicate the hybrid architecture by adopting **more** AWS
product in the BossDB codebase.

The following are the high level changes proposed

| Existing              | Proposed                   |
|-----------------------+----------------------------|
| Hybrid architecture   | Pure AWS architecture      |
| Self-managed services | Fully managed service      |
| Lotta set-up          | Deploy via CloudFormations |
|                       |                            |

The JHUAPL team has a lot of experience grown out of the Hubble
project.  As such they brought that knowledge with them while working
on BossDB.  For example, various proven open source tools for storing
secrets, managing single sign-on, RESTful API request handling,
etc. None of that is particularly interesting, and why not just reuse
what they already knew. Also note that

The core engine of BossDB is built upon AWS severless technology:
Lambda, SQS, DynamoDB, Step Functions, etc. The rest of it is consists
of proven non-serverless technologies.

The main goal of this project is to de-hybridize the architecture by
going all-in on AWS technologies which have been introduced by Amazon
in the interim since the BossDB codebase was initiated. It is arguably
a bit perverse for open source to be tuned up just for a single commercial
cloud platform, but the hypothesis herein is that by doing so it will
make it much easier for other organizations to deploy BossDB, thereby
speeding up the diffusion of innovation. Ideally the other cloud providers
would have equivalent tech to those parts of AWS used in the BossDB refresh,
but sadly that is not the case in mid-2020.

<<<<<<< Updated upstream
** Specific changes
=======
* The AWS serverless core

This essentially stays the same. The only changes would be at its
interface to the auth and audit system. Also related is how they are
generated. It is proposed to drop Heaviside and adopt AWS CDK in stead.

* Specific changes
>>>>>>> Stashed changes

| Existing  | Proposed |
|-----------+----------|
| [[https://github.com/jhuapl-boss/heaviside][heaviside]] | AWS CDK  |


*** RESTful interface
API Gateway
- The upper left red zone can be replaced by API Gateway etc.
- [ ] What's in that RDS instance
  - "data model objects & permissions"
  - Sounds pretty scheme-esque
  - Aurora Serverless? (if even need a SQL machine)

*** Single sign-on (SSO)
- Moving to Cognito will simplify per tenant billing and logging.
- The upper right red zone can be replaced by Cognito
  #+begin_quote
  We use the open source software package Keycloak as an identity
  provider to manage users and roles. We created a Django OpenID
  Connect plugin to simplify the integration of services with the SSO
  provider.  
  ...  

  Our identity provider server intentionally runs in- dependently from
  the rest of bossDB system, forc- ing the bossDB API to authenticate
  just like any other SSO integrated tool or application, and making
  fu- ture federation with other data archives or authenti- cation
  systems easy.

  The Keycloak server is deployed in an auto-scaling group that sits
  behind an Elastic Load Balancer.
  #+end_quote

- Want to be able to have a high res billing system.
  - Cognito makes that easier
  - Want a University to deploy yet be able to bill distinct departments
  - Want multi-tenant SaaS, which is similar to the university and departments

- Consider a security interface or delegator
  - core serverless engine would only talk to the interface/delegator
  - then security could be config to a Cognito provider
  - Or maybe even a dummy provider i.e. let anybody, do anything.
    - simpler management :)

- Perhaps there is already a bridge between Cogniton and whatever they are using for SSO
  - this way could still respect whatever they have going on but core code only talks Cognito
  - i.e. the pluggable interface IS Cognito.
    - So, dummy security would be a Cognito provider that says "whatevs" to anything. 

*** Secrets
- The lower reg zone can be replace with AWS Secrets Manager
- Existing
  - Vault servers are Secrets which store their info in Consul
  - Consul Servers are for key/value store




*** Heaviside => CDK
The forth main subproject is to replace heaviside with AWS CDK Python code.
- Want to write bossDB based programs/experiments which are StepFunctions
- Say, convolving some Vaa3D plug-ins over a volume
- Say, countless (2,2,2) => (1,1,1) fast pyramid builder
- Dont want to do that on heaviside.
- So, replace all existing heaviside with equivalent CDK code, then go forward on AWS tech 
  - much bigger community than heaviside-users, better community support

*** Open questions

- How does bossDB deal with Redis? Is it fully managed?
  - Figure #7 seems to imply it is
<<<<<<< Updated upstream
** Further
  [[https://drhelenmiles.medium.com/if-the-mountain-wont-go-to-mohammed-then-mohammed-must-come-to-the-mountain-27fa22148326#:~:text=Far%20Side%20Cartoons-,%E2%80%9CIf%20the%20Mountain%20won't%20go%20to%20Mohammed%2C%20then,must%20come%20to%20the%20Mountain%E2%80%9D.&text='Mahomet%20cald%20the%20Hill%20to,wil%20go%20to%20the%20hil'.][Far Side Mohammed and Hill cartoon]]
- Francis Bacon
  #+BEGIN_QUOTE
  Mahomet cald the Hill to come to him. And when the Hill stood still,
  he was neuer a whit abashed, but said; If the Hill will not come to
  Mahomet, Mahomet wil go to the hil
  #+END_QUOTE
  We want to minimize data trasfer. Do all compute in AWS on the data in S3.
=======
* Further work
>>>>>>> Stashed changes
  
The existing bossDB APIs could be used to fetch raw data for running
experiments on.  Nonetheless, it is desirable to minimize trasfering
moutains of data (on the order of petabytes).

Ergo, the compute of scientific experiments should be in
AWS because the data resides in S3. So after simplifying the architecture
the system should be extended. The base work for this already exists in
that AWS Step Functions have been adopted into the original architecture.

The main the assumptions of this argument is that the data and code
will never leave AWS. So, Step Functions is the API to various
components. One component is like ChuckFlow but as a lambda.

With regards to experiments, they can be build upon the exist Lambdas.

So, have a tall glass of AWS.

Point is: go all-in with AWS (yuch but a tech reality, sadly, for now) so Step Functions.

<<<<<<< Updated upstream
** References
=======
https://medium.com/@adhorn/getting-started-with-aws-lambda-layers-for-python-6e10b1f9a5d

* License
To the extent possible under law, John F Tigue has waived all
copyright and related or neighboring rights to Cuboids Manifesto. This
work is published from: United States.
  
* References
>>>>>>> Stashed changes
- [[https://www.biorxiv.org/content/10.1101/217745v1.abstract][The Block Object Storage Service (bossDB): A Cloud-Native Approach for Petascale Neuroscience Discovery]]
  - The copyright holder for this preprint is the author/funder, who
    has granted bioRxiv a license to display the preprint in
    perpetuity. It is made available under a CC-BY-NC-ND 4.0
    International license.
- Kool-Aid
  - Header image is a hacked up Marvel image, found via [[https://vsbattles.fandom.com/wiki/Kool-Aid_Man_(Marvel_Comics)][fandom.com]]
  - [[https://qz.com/74138/new-watered-down-kool-aid-man-just-wants-to-be-loved/][New, watered-down Kool-Aid Man just wants to be loved]]
- Mohammed and the Mountain cartoon [[https://www.reddit.com/r/pics/comments/d07mf/look_gary_larson_put_mohammed_in_a_comic_and/][(Far Side, Larson, 1992)]]





